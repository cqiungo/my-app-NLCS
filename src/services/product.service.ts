// services/product.service.ts
import createApiClient from './api.service';

class ProductService {
  api: any;

  constructor(baseUrl = `${process.env.NEXT_PUBLIC_API_URL}/product`) {
    this.api = createApiClient(baseUrl);
  }

  // ðŸŸ¢ Táº¡o sáº£n pháº©m má»›i
  async create(data: any, token?: string) {
    return (
      await this.api.post('/', data, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })
    ).data;
  }

  // ðŸŸ¢ Láº¥y táº¥t cáº£ sáº£n pháº©m
  async getAll(token?: string) {
    return (
      await this.api.get('/', {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })
    ).data;
  }

  // ðŸŸ¢ Láº¥y sáº£n pháº©m theo ID
  async get(id: any) {
    return (await this.api.get(`/${id}`)).data;
  }

  // ðŸŸ¢ Láº¥y sáº£n pháº©m theo trang (phÃ¢n trang)
  async getByPage(page: number, limit: number = 10) {
    return (
      await this.api.get('/by/pages', {
        params: { page, limit },
      })
    ).data;
  }

  // ðŸŸ¢ Cáº­p nháº­t sáº£n pháº©m
  async update(id: any, data: any, token?: string) {
    return (
      await this.api.patch(`/${id}`, data, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })
    ).data;
  }

  // ðŸŸ¢ XÃ³a sáº£n pháº©m theo ID
  async delete(id: any, token?: string) {
    return (
      await this.api.delete(`/${id}`, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })
    ).data;
  }

  // ðŸŸ¢ XÃ³a táº¥t cáº£ sáº£n pháº©m
  async deleteAll(token?: string) {
    return (
      await this.api.delete('/', {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })
    ).data;
  }
}

export default new ProductService();
